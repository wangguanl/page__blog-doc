import{_ as a,v as e,b as t,R as o}from"./chunks/framework.4f207390.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"面试题/vue/设计思想.md","filePath":"面试题/vue/设计思想.md","lastUpdated":1660556470000}'),r={name:"面试题/vue/设计思想.md"},s=o('<h2 id="mvc-和-mvvm-双向数据绑定" tabindex="-1">MVC 和 MVVM （双向数据绑定） <a class="header-anchor" href="#mvc-和-mvvm-双向数据绑定" aria-label="Permalink to &quot;MVC 和 MVVM （双向数据绑定）&quot;">​</a></h2><p>MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。通过数据驱动（VM）视图（View）。当数据变化时，自动去刷新页面DOM，这使得我们能从繁琐的DOM操作中解放出来，从而专心地去处理业务逻辑。</p><h2 id="单向数据流" tabindex="-1">单向数据流 <a class="header-anchor" href="#单向数据流" aria-label="Permalink to &quot;单向数据流&quot;">​</a></h2><p>组件之间进行数据传递，无法直接将传递进来的数据进行修改，而是通过父组件提供的方法进行修改，达到显式行为，让状态修改有迹可寻</p><h2 id="为什么要使用虚拟-dom" tabindex="-1">为什么要使用虚拟 DOM <a class="header-anchor" href="#为什么要使用虚拟-dom" aria-label="Permalink to &quot;为什么要使用虚拟 DOM&quot;">​</a></h2><p>性能提升</p>',6),i=[s];function d(n,c,h,l,m,_){return e(),t("div",null,i)}const V=a(r,[["render",d]]);export{p as __pageData,V as default};
