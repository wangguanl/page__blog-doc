import{_ as s,v as a,b as l,R as n}from"./chunks/framework.4f207390.js";const p="/page__blog-doc/assets/N2RhMzU3ZDYtNzg2Ni00MWUyLTkxMTgtNGU5MGE2ZTI3MGYx.0568ed58.png",o="/page__blog-doc/assets/NzM3NjA5MGYtODljNC00YTMwLTg1ZjQtZTE0ZGI4ZmY2MTA2.cd5feff4.png",t="/page__blog-doc/assets/YmQ0YzVmYjItMGRkYS00M2Q2LWE0ZWQtZmIyZDYzZTdjNzgz.695ea733.png",e="/page__blog-doc/assets/Yzg4N2U0ZTAtNzVkZi00NDA1LWFjN2EtZjBkZjgyNjc0NGNk.e2fbcc3f.png",c="/page__blog-doc/assets/MjI2YjkxNTgtN2Q2ZC00ODkwLTgyNmYtODY2OGQ1OTdhYTY2.bda15f4f.png",r="/page__blog-doc/assets/MzM4OWFjZTktNmExZC00NmUxLWI1MTYtODU5ZTQzMmYwMTc0.204da3ed.png",F="/page__blog-doc/assets/NWQyNDBmMWYtYTkyNy00YTFiLWJmZjYtNTE3OGUwMDgyZjU0.2a6a8041.png",y="/page__blog-doc/assets/Yzc4N2NlYzQtMzJkOC00YjhhLTkzZjMtN2U0NGJiMDNiZTlk.5b519a55.png",D="/page__blog-doc/assets/ZjBmYmE5YmEtOTcyYy00ZDQzLTlhM2QtOTQ5NzY2MmM4YTY3.dca84a7d.png",i="/page__blog-doc/assets/MzE5NGI1ODYtMTc0MC00MDQ0LWEzZmMtY2U3NjliMzBjZjY1.144eda0d.png",C="/page__blog-doc/assets/NTQ1M2QwNzUtZDA0OS00ZjUyLThiYWQtZDBiODNjZDc0ZDhk.fe66bc48.png",A="/page__blog-doc/assets/MjcxMjg2NjktZDA2YS00ZDA0LWE4ZmMtNDIzY2NkOGVkYzdi.1f0e55ff.png",m="/page__blog-doc/assets/MTJjN2IwYTctYzFkYS00NGM5LWE0YzEtMmRkM2FhYTUwOGRk.024dcec7.png",u="/page__blog-doc/assets/OTNmMmZlNDMtOWU3Ny00NWZlLWE4MGItNzM4YzQ3ZDY0YTcx.57d56710.png",g="/page__blog-doc/assets/NTlhODFiNmYtNmRiMS00MzRjLWE1ZGQtNDg0MWVmOTg5Y2Rm.ed8b3bb7.png",d="/page__blog-doc/assets/OTJkMTg1ZTItMDRlNS00YTcxLWJhZDYtZGEwNGQ0NjRkNjRl.5055b18e.png",h="/page__blog-doc/assets/ZWQzOTQ0NGUtMjRkYy00NDkzLWExNWItNDkzOWQ1OTM1YjE4.4072abd9.png",b="/page__blog-doc/assets/YjQyOGM0YjktZDA4ZC00MzRmLWI1MzktMmQ3NjViYTdiNTE5.790022a3.png",f="/page__blog-doc/assets/OWQxMDUzNmQtMWVjNS00Y2EzLTlmZmYtY2ZlYTY0Y2NiMDBl.90a65c79.png",E="/page__blog-doc/assets/OGM4MzVkMjQtNjJlNC00NzdiLWFkMzktZTUwNTI1YzNhOWQ2.c74bffb9.png",q="/page__blog-doc/assets/ZTQzMjg5MjMtODE0Ny00YzZkLTlkOTQtMDkwOGRlYTAzMjM1.8cf5a141.png",R=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"项目积累/前端/vue3-table优化/index.md","filePath":"项目积累/前端/vue3-table优化/index.md","lastUpdated":1676259080000}'),w={name:"项目积累/前端/vue3-table优化/index.md"},_=n('<p><a href="https://juejin.cn/post/7194516447932973112" target="_blank" rel="noreferrer">转载文章：vue3 table 性能优化，减少 85% 渲染耗时 - 掘金</a> 前段时间公司有一个比较重要的模块从 vue2 升级到 vue3，升级后发现 <strong>element-plus table 的性能相比 vue2 版本下降非常严重</strong>。</p><p>自定义列全部勾选的场景下（20 行 x 180 列），列表中的开关切换，耗时从原先的 400-500 毫秒下降到 7-8 秒，严重影响用户体验，经过较长时间的性能测试、debug，找到了几处比较核心的优化点。</p><p>先来看一下 20 行 x 180 列场景下各个优化点的性能测试数据，为排除偶然性，每个场景都会测 3 次。</p><table><thead><tr><th style="text-align:center;">优化类型</th><th style="text-align:center;">table 整体渲染耗时</th><th style="text-align:center;">switch 切换耗时</th></tr></thead><tbody><tr><td style="text-align:center;">未优化前</td><td style="text-align:center;">6.59s（6.71s、6.49s、6.577s）</td><td style="text-align:center;">3.982s（3.966s、3.947s、4.033s）</td></tr><tr><td style="text-align:center;">data 与 columns 从 ref 改 shallowRef 后（耗时减少 17-20%）</td><td style="text-align:center;">5.18s（5.063s、5.104s、5.363s）</td><td style="text-align:center;">3.3s（3.175s、3.029s、3.122s）</td></tr><tr><td style="text-align:center;">getColspanRealWidth 优化后（耗时减少 7-20%）</td><td style="text-align:center;">4.843（4.728s、4.703s 、5.098s）</td><td style="text-align:center;">2.65s（2.636s、2.645s、2.671s）</td></tr><tr><td style="text-align:center;">业务优化 去除tooltip disabled属性后（耗时减少 80%）</td><td style="text-align:center;">1.008s（1.032s、0.997s、0.994s）</td><td style="text-align:center;">0.514s（0.517s、0.53s、0.495s）</td></tr></tbody></table><p>大致优化内容如下</p><ul><li><p>修改 table 源码，将 data 与 columns 从 ref 改为 shallowRef。</p></li><li><p>修改 table 源码，getColspanRealWidth 函数中响应式数据优化。</p></li><li><p>业务优化：去掉 el-tooltip disabled 属性，改为 if。</p></li></ul><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><p>首先初始化一个 vue3 项目，引入 element-plus，并使用 el-table 实现一个 20 行 * 180 列表格。</p><ul><li><p>20 行 + 180 列：2 个固定列（一个文本、一个 switch），178 个通过 for 循环创建的自定义列</p></li><li><p>一个显示/隐藏 table 的 switch 开关，用于测试 table 从隐藏到显示，渲染耗时</p></li><li><p>自定义列中有一个 el-tooltip + disabled 逻辑</p></li></ul><p><img src="'+p+`" alt="1-table-base.png"></p><h3 id="最小化业务-demo-创建" tabindex="-1">最小化业务 demo 创建 <a class="header-anchor" href="#最小化业务-demo-创建" aria-label="Permalink to &quot;最小化业务 demo 创建&quot;">​</a></h3><p>核心 table 代码代码如下，完整代码参见：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fzuoxiaobai%2Ftable-performance-demo%2Ftree%2Ftable-base" title="https://github.com/zuoxiaobai/table-performance-demo/tree/table-base" target="_blank" rel="noreferrer">table-base | table-performance-demo</a></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">el-table</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">showTable</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:data</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tableData</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width: 100%; height: 500px; overflow: scroll</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">el-table-column</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">prop</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">label</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">信息</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">80</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fixed</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">el-table-column</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">prop</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">status</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">label</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">状态</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">80</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fixed</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">#default</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scope</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">el-switch</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scope.row.status</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@change</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">statusChange</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">el-table-column</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">el-table-column</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item in customColumns</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item.prop</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:prop</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item.prop</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:label</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item.label</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">#default</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scope</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">el-tooltip</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#C792EA;">placement</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">top-start</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#C792EA;">:disabled</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!(item.prop === &#39;column1&#39; </span><span style="color:#A6ACCD;">&amp;amp;&amp;amp;</span><span style="color:#C3E88D;"> scope.row[item.prop])</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">#content</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ &quot;tooltip显示&quot; + scope.row[item.prop] }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ scope.row[item.prop] }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">el-tooltip</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">el-table-column</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">el-table</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 假数据逻辑</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> customColCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">178</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 自定义列数</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rowCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 行数</span></span>
<span class="line"><span style="color:#82AAFF;">onBeforeMount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 初始化自定义列数据</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">temp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">customColCount</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">temp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> prop</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">column</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> label</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">第</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">列</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">customColumns</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">temp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 初始化表格数据</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dataTemp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rowCount</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">row</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> info</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">第</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">行</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> status</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">amp</span><span style="color:#89DDFF;">;&amp;</span><span style="color:#A6ACCD;">amp</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">row</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">customColCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">row</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">column</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">j </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">第</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">行</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">j </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">列</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">dataTemp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">row</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">tableData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dataTemp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><h3 id="渲染耗时计算逻辑" tabindex="-1">渲染耗时计算逻辑 <a class="header-anchor" href="#渲染耗时计算逻辑" aria-label="Permalink to &quot;渲染耗时计算逻辑&quot;">​</a></h3><p>渲染耗时计算逻辑如下，利用 script 阻塞，来计算渲染耗时</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;div v-loading=&quot;showLoading&quot; element-loading-text=&quot;数据加载中...&quot;&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &lt;p&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    当前显示：{{ \`\${rowCount}行\${customColCount + 2}列\` }}， 显示/隐藏 table：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;el-switch :model-value=&quot;showTable&quot; @click=&quot;switchTableShow&quot;&gt;&lt;/el-switch&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &lt;/p&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &lt;el-table v-if=&quot;showTable&quot;&gt; .... &lt;/el-table&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 显示/隐藏 table，计算 table 渲染耗时</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> switchTableShow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 先展示 loading</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">showLoading</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 200ms 后再修改 table 是否显示，防止和 loading 合并到一个渲染周期，导致 loading 不显示</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">startTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">showTable</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">showTable</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 修改 table 显示，会形成 script 阻塞</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">showLoading</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 这里的 loading 关闭，会在 table 阻塞完成后渲染关闭 dom</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 创建一个宏任务，等上面阻塞的微任务执行完成后，再显示计算耗时</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">endTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">ElMessage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">success</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">渲染耗时：</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">(endTime </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> startTime) </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">s</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><h3 id="性能数据-与-performance-耗时对比" tabindex="-1">性能数据，与 performance 耗时对比 <a class="header-anchor" href="#性能数据-与-performance-耗时对比" aria-label="Permalink to &quot;性能数据，与 performance 耗时对比&quot;">​</a></h3><p>table 渲染、switch 切换测试耗时如下</p><p><img src="`+o+'" alt="table-base-duration.png"></p><p>table 隐藏到显示 gif 图</p><p><img src="'+t+'" alt="table-base-6-8-s.gif"></p><p>switch 从关到开 gif 图</p><p><img src="'+e+'" alt="table-base-switch-3-8-s.gif"></p><p>为了验证我们自己写的耗时测试数据的准确性，这里在 switch 开关时，打开了 performance 录制，具体如下图</p><p><code>页面显示渲染耗时：4.524s，performance 中两个 Long Task：2.29s + 2.17，加上非 Long Task 部分，数据基本一致，因此我们自己写的耗时计算逻辑是基本准确的</code></p><p><img src="'+c+'" alt="table-base-switch-performance.gif"></p><p>另外，开启 performance 录制时，比不录制时要稍微慢点。下面来开始优化吧！</p><h2 id="ref-改-shallowref" tabindex="-1">ref 改 shallowRef <a class="header-anchor" href="#ref-改-shallowref" aria-label="Permalink to &quot;ref 改 shallowRef&quot;">​</a></h2><h3 id="理论依据与可行性分析" tabindex="-1">理论依据与可行性分析 <a class="header-anchor" href="#理论依据与可行性分析" aria-label="Permalink to &quot;理论依据与可行性分析&quot;">​</a></h3><p>列表中的开关切换时，table 虽然只是一个节点发生了变化，但依旧触发了完整的 vue patch 比对更新逻辑，耗时较久。</p><p>来看一个官方的解释：<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fguide%2Fextras%2Frendering-mechanism.html%23compiler-informed-virtual-dom" title="https://cn.vuejs.org/guide/extras/rendering-mechanism.html#compiler-informed-virtual-dom" target="_blank" rel="noreferrer">渲染机制 | Vue.js</a></p><p><img src="'+r+`" alt="vue-render-logic.png"></p><p><strong>理论上，减少响应式数据依赖，就可以提升性能。</strong></p><p>shallowRef() 是 ref() 的浅层作用形式。仅当 xx.value 发生变更时，才触发响应更新，减少深层次的响应依赖，可以提升 patch 比对性能。参考 <a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fguide%2Fbest-practices%2Fperformance.html%23reduce-reactivity-overhead-for-large-immutable-structures" title="https://cn.vuejs.org/guide/best-practices/performance.html#reduce-reactivity-overhead-for-large-immutable-structures" target="_blank" rel="noreferrer">指南 - 减少大型不可变结构的响应性开销</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// shallowRef 不会触发更改，如果 state 为 ref 时，是可以触发更新的。</span></span>
<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// shallowRef 会触发更改</span></span>
<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>这里主要修改两种数据从 ref 到 shallowRef</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/table/src/store/watcher.ts</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useWatcher</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#F07178;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#F07178;">([])</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// table data 数据</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">columns</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TableColumnCtx</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#F07178;">([])</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 列数据</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>这里有个问题，把 data、columns 改为 shallowRef 对功能会不会有影响？</p><ul><li><p>首选，每次列表数据更新，我们业务逻辑都会去请求列表，设置 list.value = xxx 可以触发 shallowRef 更新。</p></li><li><p>经过测试，就算是 switch 开关 v-model 绑定的 scope.row.status 变更也可以正常更新。</p></li><li><p>手动点击测试选中、排序、分页等均未发现异常。</p></li></ul><p>基于以上三点，在我们业务中，这个修改是可行的。提醒：如果想在你自己的项目中使用该优化，需要先做好测试。</p><p>下面来看具体修改细节</p><h3 id="拷贝-element-plus-table-源码到当前项目" tabindex="-1">拷贝 element-plus table 源码到当前项目 <a class="header-anchor" href="#拷贝-element-plus-table-源码到当前项目" aria-label="Permalink to &quot;拷贝 element-plus table 源码到当前项目&quot;">​</a></h3><p>当前最新的版本是 2.2.8，打开 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Felement-plus%2Felement-plus%2Freleases" title="https://github.com/element-plus/element-plus/releases" target="_blank" rel="noreferrer">element-plus/releases</a>，下载最新版本代码，将 table 目录（ <code>element-plus-2.2.28/packages/components/table</code> ） copy 到项目中的 src/table 下，删除目中无用的 <code>__test__</code> 测试目录</p><p>新开一个路由，/new 指定到一个新增的 table 组件内，相比原先 table 组件，只增加一行代码，当前组件内使用我们自定义修改的 table。完整代码参见：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fzuoxiaobai%2Ftable-performance-demo%2Ftree%2F2-table-use-source" title="https://github.com/zuoxiaobai/table-performance-demo/tree/2-table-use-source" target="_blank" rel="noreferrer">2-table-use-source | table-performance-demo</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> ElTable </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@/table/src/table.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>引入后报错 <code>[plugin:vite:import-analysis] Failed to resolve import &quot;@element-plus/directives&quot; from &quot;src\\table\\src\\table.vue&quot;. Does the file exist?</code></p><p><img src="`+F+`" alt="element-table-error.png"></p><p>做一些修改，让代码可以在我们自己的项目中跑起来，方便修改、调试源码</p><ol><li>在 table 目录中搜索 @element-plus 相关关键字，并进行批量替换</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// @element-plus/directives =&gt; element-plus/es/directives/index</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// @element-plus/hooks =&gt; element-plus/es/hooks/index</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// @element-plus/utils =&gt; element-plus/es/utils/index</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><ol><li>搜索 @element-plus/components 改为直接从 &#39;element-plus&#39; 引入</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 比如：</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> ElCheckbox </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@element-plus/components/checkbox</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 改为</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ElCheckbox</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">element-plus</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注意：资源类的可以不用改，比如 import &quot;@element-plus/components/base/style/css&quot;; </span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><h3 id="修改源码-ref-改-shallowref" tabindex="-1">修改源码 - ref 改 shallowRef <a class="header-anchor" href="#修改源码-ref-改-shallowref" aria-label="Permalink to &quot;修改源码 - ref 改 shallowRef&quot;">​</a></h3><p>在 src/table/src/store/watcher.ts 中，将 data 和 columns 数据从 ref 改为 shallowRef，具体代码参：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fzuoxiaobai%2Ftable-performance-demo%2Ftree%2Ftable-ref-shallowRef" title="https://github.com/zuoxiaobai/table-performance-demo/tree/table-ref-shallowRef" target="_blank" rel="noreferrer">table-ref-shallowRef | table-performance-demo</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/table/src/store/watcher.ts</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useWatcher</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#F07178;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#F07178;">([])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#F07178;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#F07178;">([])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_columns</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TableColumnCtx</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#F07178;">([])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">columns</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TableColumnCtx</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#F07178;">([])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>另外在 中 表格前面增加下面一行，标记调用的是我们修改的 table 组件</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- src/table/src/table.vue 表格顶部增加下面一行 ---&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">color: red</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">来自 table 源码</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 内部逻辑 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ns.e(&#39;inner-wrapper&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tableInnerStyle</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- ... --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><h3 id="性能数据-耗时减少17-20" tabindex="-1">性能数据（耗时减少17-20%） <a class="header-anchor" href="#性能数据-耗时减少17-20" aria-label="Permalink to &quot;性能数据（耗时减少17-20%）&quot;">​</a></h3><p>table 渲染、switch 切换测试耗时如下</p><p><img src="`+y+'" alt="table-ref-shallow-ref-duration.png"></p><p>table 隐藏到显示 gif 图</p><p><img src="'+D+'" alt="table-ref-shallowRef.gif"></p><p>switch 从关到开 gif 图</p><p><img src="'+i+'" alt="table-ref-shallowRef-switch.gif"></p><h2 id="getcolspanrealwidth-优化" tabindex="-1">getColspanRealWidth 优化 <a class="header-anchor" href="#getcolspanrealwidth-优化" aria-label="Permalink to &quot;getColspanRealWidth 优化&quot;">​</a></h2><p>当页面卡顿时，可以通过 performance 测试性能。下图是点击 switch 开关后的性能数据。可以看到</p><ul><li><p>有两个 Scripting 阻塞 longTask，1.89s + 1.73s，整体耗时 3.62s (performance开启时，会变慢一点)</p></li><li><p>主要有两种耗时任务：紫色小块是 render 渲染耗时、绿色小块是 patch 比对耗时，一般 patch 是 vue 内部逻辑，比较难优化</p></li><li><p>通过查看 render 相关耗时，找到 getColspanRealWidth 耗时 212.2ms，这里有优化的空间</p></li></ul><p><img src="'+C+`" alt="switch-performance-test.png"></p><p>我们来查看这个函数耗时的原因，主要是在 tr 渲染时调用该函数，计算每列的宽度</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src\\table\\src\\table-body\\render-helper.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">columns</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">column</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cellIndex</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">columnData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">realWidth</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getColspanRealWidth</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">columns</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">colspan</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">cellIndex</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>具体实现如下，只用到了 realWidth, width 属性，且 columns.value 是响应式依赖，可以修改为非响应式数据，看是否能减少耗时。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src\\table\\src\\table-body\\styles-helper.ts</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getColspanRealWidth </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">columns</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TableColumnCtx</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">colspan</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">colspan</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">columns</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">realWidth</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">widthArr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">columns</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">({</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">realWidth</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">realWidth</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">width</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">colspan</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">widthArr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">acc</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">width</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>这里我们新建 optimizeColumns 变量，存储函数中使用的 realWidth 和 width，将这个非响应式数据传入到 getColspanRealWidth 函数内部使用，完整代码参见 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fzuoxiaobai%2Ftable-performance-demo%2Ftree%2FgetColspanRealWidth-optimize" title="https://github.com/zuoxiaobai/table-performance-demo/tree/getColspanRealWidth-optimize" target="_blank" rel="noreferrer">getColspanRealWidth-optimize | table-performance-demo</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src\\table\\src\\table-body\\render-helper.ts</span></span>
<span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> optimizeColumns </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> columns</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> realWidth</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">realWidth</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> width</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">width</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">columns</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">column</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cellIndex</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">columnData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">realWidth</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getColspanRealWidth</span><span style="color:#F07178;">(</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">optimizeColumns</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 传入函数内部时，使用非响应式数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">colspan</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">cellIndex</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><h3 id="耗时从-200ms-下降到-0-7ms" tabindex="-1">耗时从 200ms 下降到 0.7ms <a class="header-anchor" href="#耗时从-200ms-下降到-0-7ms" aria-label="Permalink to &quot;耗时从 200ms 下降到 0.7ms&quot;">​</a></h3><p>修改好后再次测试性能，惊喜的发现，这个函数的耗时从 200ms+ 下降到 1ms 内，render 性能明显提升。1.54s + 1.45s = 2.99s</p><p><img src="`+A+'" alt="getColspanRealWidth-optimize.png"></p><h3 id="性能数据-耗时减少7-20" tabindex="-1">性能数据（耗时减少7-20%） <a class="header-anchor" href="#性能数据-耗时减少7-20" aria-label="Permalink to &quot;性能数据（耗时减少7-20%）&quot;">​</a></h3><p>table 渲染、switch 切换测试耗时如下</p><p><img src="'+m+'" alt="get-width-optimize-perf.png"></p><p>table 隐藏到显示 gif 图</p><p><img src="'+u+'" alt="get-width-optimize-table.gif"></p><p>switch 从关到开 gif 图</p><p><img src="'+g+`" alt="get-width-optimize-switch.gif"></p><h2 id="业务优化-tooltip-disabled-改-if" tabindex="-1">业务优化 tooltip disabled 改 if <a class="header-anchor" href="#业务优化-tooltip-disabled-改-if" aria-label="Permalink to &quot;业务优化 tooltip disabled 改 if&quot;">​</a></h2><p>经过上面的优化后，我们意识到，即使是很细微的响应式数据优化，也会对性能带来较大影响。那业务逻辑中是否也存在这样的数据呢？</p><p><strong>于是采用注释 + 将 el-table-column 插槽换成静态节点 <code>&lt;span&gt;123&lt;/span&gt;</code> 的方法，测试具体是哪里耗时较长，然后针对性优化</strong>。</p><p>经过测试，发现将自定义列中的 el-tooltip 换成静态节点后，性能有极大提升。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">el-table-column</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item in customColumns</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item.prop</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:prop</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item.prop</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:label</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item.label</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">#default</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scope</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- &lt;el-tooltip</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      placement=&quot;top-start&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      :disabled=&quot;!(item.prop === &#39;column1&#39; &amp;amp;&amp;amp; scope.row[item.prop])&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      &lt;template #content&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        &lt;span&gt;{{ &quot;tooltip显示&quot; + scope.row[item.prop] }}&lt;/span&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      &lt;/template&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      &lt;span&gt;{{ scope.row[item.prop] }}&lt;/span&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;/el-tooltip&gt; --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">123</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">el-table-column</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>如下图，switch 开关切换耗时从 2.7s 左右减少到 0.5s 左右。performance 面板可以看到 patch 基本没有了，应该是模板编译时静态节点标记后，更新时就不用比对了。</p><p><img src="`+d+`" alt="tooltip-static-node-test.png"></p><p>基于这个思路，el-tooltip 组件会成倍的增加 patch 比对耗时，减少这个节点数量即可增强性能。</p><p>为了少些一些代码，el-tooltip 使用 disabled 属性，用于在特定场景下隐藏 tooltip，这一部分数据可以不使用 el-tooltip 节点，改动如下，使用 v-if 替换 disabled 属性功能，这样虽然会有重复代码，但可以减少节点数。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">#default</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scope</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!-- </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;el-tooltip</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      placement=&quot;top-start&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      :disabled=&quot;!(item.prop === &#39;column1&#39; &amp;amp;&amp;amp; scope.row[item.prop])&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      &lt;template #content&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        &lt;span&gt;{{ &quot;tooltip显示&quot; + scope.row[item.prop] }}&lt;/span&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      &lt;/template&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      &lt;span&gt;{{ scope.row[item.prop] }}&lt;/span&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;/el-tooltip&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!(item.prop === &#39;column1&#39; </span><span style="color:#A6ACCD;">&amp;amp;&amp;amp;</span><span style="color:#C3E88D;"> scope.row[item.prop])</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {{ scope.row[item.prop] }}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">el-tooltip</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-else</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">placement</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">top-start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">#content</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ &quot;tooltip显示&quot; + scope.row[item.prop] }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ scope.row[item.prop] }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">el-tooltip</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>再次测试性能，可以看到性能并没有下降多少，switch 开关切换可以做到 0.5s 左右刷新</p><p><img src="`+h+'" alt="tooltip-optimize.png"></p><h3 id="性能数据-耗时减少80" tabindex="-1">性能数据（耗时减少80%） <a class="header-anchor" href="#性能数据-耗时减少80" aria-label="Permalink to &quot;性能数据（耗时减少80%）&quot;">​</a></h3><p>table 渲染、switch 切换测试耗时如下</p><p><img src="'+b+'" alt="tooltip-optimize-pref.png"></p><p>table 隐藏到显示 gif 图</p><p><img src="'+f+'" alt="tooltip-optimize-table.gif"></p><p>switch 从关到开 gif 图</p><p><img src="'+E+'" alt="tooltip-optimize-switch.gif"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>如下图，通过 3 个小的细节改动，将 table 渲染耗时从 6.88s 减少到 1s 左右，平均减少 85% 渲染耗时，用户体验基本达到预期。完整 demo github 地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fzuoxiaobai%2Ftable-performance-demo" title="https://github.com/zuoxiaobai/table-performance-demo" target="_blank" rel="noreferrer">github.com/zuoxiaobai/…</a></p><p><img src="'+q+'" alt="pref-summary.png"></p><p>在 vue3 项目中，响应式数据这块要特别注意。当遇到比较慢的场景时，建议采用如下方法进行性能优化</p><ul><li><p>使用 performance 分析性能瓶颈，或者自己写一个性能耗时逻辑，这样在做性能优化时有数据参考。</p></li><li><p>针对业务代码较多场景，采用注释 + 替换成静态节点方法排查耗时较长的逻辑，针对性优化。</p></li><li><p>另外，可以使用 Vue devtools 调试工具，查看组件更新渲染耗时，排查响应式数据问题。</p></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FZj6h6szd4JTvYb5noYwxgQ%23" title="https://mp.weixin.qq.com/s/Zj6h6szd4JTvYb5noYwxgQ#" target="_blank" rel="noreferrer">一顿操作，我把 Table 组件性能提升了十倍</a></li></ul>',110),v=[_];function x(k,j,T,N,z,M){return a(),l("div",null,v)}const B=s(w,[["render",x]]);export{R as __pageData,B as default};
