import{_ as s,v as a,b as o,R as e}from"./chunks/framework.4f207390.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/基础/原型链.md","filePath":"js/基础/原型链.md","lastUpdated":1692174619000}'),p={name:"js/基础/原型链.md"},n=e(`<ul><li><p>声明一个构造函数，在构造函数内部使用 this 定义属性， 在构造函数的 prototype 定义方法</p></li><li><p>使用 new 构造函数创建实例对象，实例对象是构造函数 this 定义的属性，实例对象的 <strong>proto</strong> 指向构造函数的 prototype，实例对象的 constructor 指向构造函数</p></li><li><p>使用 new 时做了那些事情？</p><ul><li>创建一个实例对象</li><li>this 指向实例对象</li><li>返回实例对象</li><li>实例对象的--proto--指向构造函数的prototype</li></ul></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">People</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//对象方法</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">Introduce</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My name is </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//类方法</span></span>
<span class="line"><span style="color:#A6ACCD;">People</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Run</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">I can run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//原型方法</span></span>
<span class="line"><span style="color:#FFCB6B;">People</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IntroduceChinese</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我的名字是</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="object-defineproperty" tabindex="-1">Object.defineProperty <a class="header-anchor" href="#object-defineproperty" aria-label="Permalink to &quot;Object.defineProperty&quot;">​</a></h2><p>设置 configurable、enumerable、writable、value、getter、setter</p><h2 id="object-defineproperties" tabindex="-1">Object.defineProperties <a class="header-anchor" href="#object-defineproperties" aria-label="Permalink to &quot;Object.defineProperties&quot;">​</a></h2><p>设置多个 configurable、enumerable、writable、value、getter、setter</p><h2 id="object-getownpropertydescriptor" tabindex="-1">Object.getOwnPropertyDescriptor <a class="header-anchor" href="#object-getownpropertydescriptor" aria-label="Permalink to &quot;Object.getOwnPropertyDescriptor&quot;">​</a></h2><p>获取单个对象的configurable、enumerable、writable、value、getter、setter</p><h2 id="object-getownpropertydescriptors" tabindex="-1">Object.getOwnPropertyDescriptors <a class="header-anchor" href="#object-getownpropertydescriptors" aria-label="Permalink to &quot;Object.getOwnPropertyDescriptors&quot;">​</a></h2><p>获取对象的全部属性</p><h2 id="person-prototype-isprototypeof-p1-实例" tabindex="-1">Person.prototype.isPrototypeOf(p1(实例)) <a class="header-anchor" href="#person-prototype-isprototypeof-p1-实例" aria-label="Permalink to &quot;Person.prototype.isPrototypeOf(p1(实例))&quot;">​</a></h2><p>判断实例是否属于此原型</p><h2 id="object-hasprototypeof-p1-实例" tabindex="-1">Object.hasPrototypeOf(p1(实例)) <a class="header-anchor" href="#object-hasprototypeof-p1-实例" aria-label="Permalink to &quot;Object.hasPrototypeOf(p1(实例))&quot;">​</a></h2><p>获取到实例的原型 对比 Person.prototype (相当于p1.<strong>proto</strong>)</p><h2 id="obj-hasownproperty-type" tabindex="-1">obj.hasOwnProperty(&#39;type&#39;) <a class="header-anchor" href="#obj-hasownproperty-type" aria-label="Permalink to &quot;obj.hasOwnProperty(&#39;type&#39;)&quot;">​</a></h2><p>在实例上是否可以找到属性</p><h2 id="obj-hasprototypeproperty-type" tabindex="-1">obj.hasPrototypeProperty(&#39;type&#39;) <a class="header-anchor" href="#obj-hasprototypeproperty-type" aria-label="Permalink to &quot;obj.hasPrototypeProperty(&#39;type&#39;)&quot;">​</a></h2><p>在原型(prototype)上是否可以找到属性，前提是实例上不存在</p><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2>`,19),t=[n];function l(r,c,y,i,F,D){return a(),o("div",null,t)}const b=s(p,[["render",l]]);export{d as __pageData,b as default};
