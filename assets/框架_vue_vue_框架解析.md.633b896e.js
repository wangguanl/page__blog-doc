import{_ as e,v as t,b as r,R as a}from"./chunks/framework.4f207390.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"框架/vue/vue/框架解析.md","filePath":"框架/vue/vue/框架解析.md","lastUpdated":1661234872000}'),l={name:"框架/vue/vue/框架解析.md"},i=a('<h2 id="new-vue-后整个的流程" tabindex="-1">new Vue 后整个的流程 <a class="header-anchor" href="#new-vue-后整个的流程" aria-label="Permalink to &quot;new Vue 后整个的流程&quot;">​</a></h2><ul><li>传入option，合并option配置</li><li>初始化生命周期</li><li>初始化事件中心</li><li>初始化 data、props、computed、watcher</li><li>初始化渲染</li><li><a href="https://www.cnblogs.com/raind/p/10646341.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/raind/p/10646341.html</a></li></ul><h2 id="响应式原理" tabindex="-1">响应式原理 <a class="header-anchor" href="#响应式原理" aria-label="Permalink to &quot;响应式原理&quot;">​</a></h2><p>vue是通过数据劫持和订阅发布来进行深入响应的。</p><ul><li>数据劫持（双向数据绑定）：通过 Object.defineProperty 的 getter/setter 监听数据的变化，同时getter也用于依赖收集，而setter在数据变更时通知订阅者更新视图</li><li>发布订阅模式：通过之定义自定义事件将data的变化反映到视图上去，vue通过observer观察者对象反应数据的变化，然后通知vue生成新的Virtual DOM ，进而渲染视图</li><li>观察者模式 （Observer）（发布订阅模式） 通过递归的方式把一个对象的所有属性都转化成可观测对象 <a href="https://www.freesion.com/article/2571574110/" target="_blank" rel="noreferrer">https://www.freesion.com/article/2571574110/</a><a href="https://blog.csdn.net/xiaozidewawa/article/details/108381583" target="_blank" rel="noreferrer">https://blog.csdn.net/xiaozidewawa/article/details/108381583</a><a href="https://zhuanlan.zhihu.com/p/51357583" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/51357583</a><a href="https://www.jianshu.com/p/594f018b68e7" target="_blank" rel="noreferrer">https://www.jianshu.com/p/594f018b68e7</a><a href="https://www.cnblogs.com/fundebug/p/responsive-vue.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/fundebug/p/responsive-vue.html</a><a href="https://www.cnblogs.com/liaohuihui/p/11269052.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/liaohuihui/p/11269052.html</a></li></ul>',5),o=[i];function n(s,h,p,c,u,w){return t(),r("div",null,o)}const m=e(l,[["render",n]]);export{f as __pageData,m as default};
