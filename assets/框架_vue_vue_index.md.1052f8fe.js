import{_ as s,v as a,b as l,R as n}from"./chunks/framework.4f207390.js";const C=JSON.parse('{"title":"Vue 使用","description":"","frontmatter":{},"headers":[],"relativePath":"框架/vue/vue/index.md","filePath":"框架/vue/vue/index.md","lastUpdated":1662619608000}'),p={name:"框架/vue/vue/index.md"},e=n(`<h1 id="vue-使用" tabindex="-1">Vue 使用 <a class="header-anchor" href="#vue-使用" aria-label="Permalink to &quot;Vue 使用&quot;">​</a></h1><ol><li>Vue 组件通信 <ul><li>props、$emit</li><li>$on、$emit</li><li>vuex</li><li>$attrs、$listeners</li><li>$parent 、 $children 、 ref</li><li>provide、inject</li></ul></li><li>slot</li><li>computed 和 watch computed创建的属性会被缓存，在页面多次使用也只会触发一次。依赖的数据发生变化时会再次更新。 watch用于异步监听数据。</li><li>完整版（vue.js）和运行版（vue.runtime.js）有什么区别 template解析器占据代码的三分之一。完整版包含template解析器；运行版去除了template解析器，保留了核心功能</li><li>key vnode 在更新时会用 key 进行对比，在对比时发现相同的 key， 直接会复用元素。如果不填写 key，vue 则会默认生成，不会干扰 vnode 的对比。更新 key 时页面元素会重新渲染。</li></ol><h1 id="vue-思想" tabindex="-1">Vue 思想 <a class="header-anchor" href="#vue-思想" aria-label="Permalink to &quot;Vue 思想&quot;">​</a></h1><ol><li><p>MVC 和 MVVM （双向数据绑定） MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。通过数据驱动（VM）视图（View）。当数据变化时，自动去刷新页面DOM，这使得我们能从繁琐的DOM操作中解放出来，从而专心地去处理业务逻辑。</p></li><li><p>单向数据流</p><p>组件之间进行数据传递，无法直接将传递进来的数据进行修改，而是通过父组件提供的方法进行修改，达到显式行为，让状态修改有迹可寻</p></li><li><p>为什么使用 Composition API <a href="https://blog.csdn.net/wu_xianqiang/article/details/104417875" target="_blank" rel="noreferrer">https://blog.csdn.net/wu_xianqiang/article/details/104417875</a></p><p><a href="https://blog.csdn.net/u011068996/article/details/111337403" target="_blank" rel="noreferrer">https://blog.csdn.net/u011068996/article/details/111337403</a></p></li><li><p>JSX 语法开发与传统开发有什么区别（包含了 为什么使用JSX语法开发） 因为 JSX 语法符合 Vnode 的抽象思维，更加贴近 Vue 原生底层结构，思想和结构更加清晰明了。JSX 应用起来更加灵活。</p></li><li><p>为什么要使用虚拟 DOM 性能提升</p></li><li><p>Vue、React、Angular 哪个更好？</p><ul><li><p>与其说哪个更好，主要是看社区更发达为主要优点之一</p></li><li><p>Vue 集成了 React 和 Angular 的优点，通过vue核心去对比三大框架。</p><ul><li>集成了 Angular 的哪些优点</li><li>相比之下与不如 Angular</li><li>集成了 React 的哪些优点</li><li>相比之下与不如 React</li></ul></li><li><p>Vue 和 React 都可以完成相同的事情。 两者都是JS嘛， 但是React偏向于底层JS， 而Vue框架内提供了大量的API，偏向于Jquery。但是Vue3新推出了compositionAPI（组合式开发）更加融合了Vue集合了Angular、React两者的优点，对新接触框架的人更友好。</p></li><li><p>react不算是真正意义上的框架， 而是一种开发范式。 它的核心思想非常简单：</p><p>界面/视图就是数据结构的可视化表达 UI = f(data)</p><p>而界面/视图由组件组合而来 UI = f1(data) + f2(data) + f3(data) + ...</p><p>That&#39;s all.</p><p>三大框架整体的核心思想都是源于数据驱动（MVVM）</p></li><li><p><a href="https://juejin.cn/post/6850037277675454478#heading-1" target="_blank" rel="noreferrer">https://juejin.cn/post/6850037277675454478#heading-1</a></p></li></ul></li><li><p>Vue2 和 Vue3 的区别</p><ul><li>更好的支持 typescript</li><li>底层，使用了Proxy</li><li>API：几大改动，细小改动</li><li>疑点： <ul><li>provide/inject</li><li>computed</li><li>watch</li><li>watchEffect</li><li>resolveDirective</li><li>withDirectives</li><li>createRenderer 更多可以看 vue2 迁移 <a href="https://vue-docs-next-zh-cn.netlify.app/guide/migration/introduction.html#%E6%A6%82%E8%A7%88" target="_blank" rel="noreferrer">https://vue-docs-next-zh-cn.netlify.app/guide/migration/introduction.html#概览</a> 不建议保留对原始对象的持久引用。请谨慎使用。返回的 proxy 是不等于原始对象的。建议只使用响应式 proxy，避免依赖原始对象</li><li>分清楚 Vue3 新特性 和 Vue2 与 Vue3 对应API的改动</li></ul></li></ul></li><li><p>自定义 hook 抽离可复用的功能，框架提供一些内置函数，在 hook 里可以调用，让这个功能拥有组件状态。 更加是弥补了 mixin、extend 的缺点：不清楚暴露出来的变量的作用、命名冲突、重用低效。mixin属于隐式使用，hooks更强调与先声明后使用。</p></li></ol><h1 id="vue-底层" tabindex="-1">Vue 底层 <a class="header-anchor" href="#vue-底层" aria-label="Permalink to &quot;Vue 底层&quot;">​</a></h1><ol><li><p>new Vue 后整个的流程</p><ul><li>传入option，合并option配置</li><li>初始化生命周期</li><li>初始化事件中心</li><li>初始化 data、props、computed、watcher</li><li>初始化渲染</li><li><a href="https://www.cnblogs.com/raind/p/10646341.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/raind/p/10646341.html</a></li></ul></li><li><p>Vue3 如何实现响应式 （proxy 和 object.defineproperty 的区别）</p><ol><li>Vue3 使用 Proxy，Proxy 代理是针对整个对象，而不是对象的某个属性，因此不同于 <code>Object.defineProperty</code> 的必须遍历对象每个属性，<code>Proxy</code> 只需要做一层代理就可以监听同级结构下的所有属性变化，当然对于深层结构，递归还是需要进行的。此外 Proxy 还支持代理数组变化。</li><li>Object.defineProperty 在一个对象上定义一个新属性或者修改一个已经存在的属性，使用 getter/setter 监听这个属性的变化。Object.defineProperty 的缺陷三个： <ul><li>不能监听数组的变化，需要使用函数拦截处理数组的 push、pop、shift、unshift、revers、sort、splice 方法</li><li>必须遍历对象的每个属性</li><li>必须深层遍历嵌套的对象</li></ul></li></ol></li><li><p>响应式原理 vue是通过数据劫持和订阅发布来进行深入响应的。</p><ul><li>数据劫持（双向数据绑定）：通过 Object.defineProperty 的 getter/setter 监听数据的变化，同时getter也用于依赖收集，而setter在数据变更时通知订阅者更新视图</li><li>发布订阅模式：通过之定义自定义事件将data的变化反映到视图上去，vue通过observer观察者对象反应数据的变化，然后通知vue生成新的Virtual DOM ，进而渲染视图</li></ul></li><li><p>观察者模式 （Observer）（发布订阅模式） 通过递归的方式把一个对象的所有属性都转化成可观测对象 <a href="https://www.freesion.com/article/2571574110/" target="_blank" rel="noreferrer">https://www.freesion.com/article/2571574110/</a><a href="https://blog.csdn.net/xiaozidewawa/article/details/108381583" target="_blank" rel="noreferrer">https://blog.csdn.net/xiaozidewawa/article/details/108381583</a><a href="https://zhuanlan.zhihu.com/p/51357583" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/51357583</a><a href="https://www.jianshu.com/p/594f018b68e7" target="_blank" rel="noreferrer">https://www.jianshu.com/p/594f018b68e7</a><a href="https://www.cnblogs.com/fundebug/p/responsive-vue.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/fundebug/p/responsive-vue.html</a><a href="https://www.cnblogs.com/liaohuihui/p/11269052.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/liaohuihui/p/11269052.html</a></p></li><li><p>模板引擎</p><ul><li><p>解析模板生成 vnode、AST，解析模板语法、插值，生成真实DOM</p></li><li><p>使用cloneNode生成一份template模板，使用递归解析模板，使用.nodeType判断节点类型（1、元素节点，3、文本节点），如果为1时调用递归函数，为1时获取.nodeValue并且使用正则（<code>/\\{\\{(.+?)\\}\\}/g</code>）解析模板内容，拿到内容后进行替换，然后将 cloneNode 替换页面 node</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	* 把一个形如&#39;data.a.b.c&#39;的字符串路径所表示的值，从真实的data对象中取出来</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    * 使用函数柯里化的技巧</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parsePath</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 判断path是否正确</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">/[^</span><span style="color:#C3E88D;">\\w.$</span><span style="color:#89DDFF;">]/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">segments</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 两种写法</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">/* let key = &#39;&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">			while (key = segments.shift()) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">				// 判断obj是否正确</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            	if (!obj) return;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                 obj = obj[key]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            } */</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">segments</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">segments</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]]</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">parsePath</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a.b.c.d.e</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">d</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul></li><li><p>Vue最小化更新过程是什么样子的</p></li><li><p>Vue 如何实现指令系统</p></li><li><p>用到了哪些开发小技巧</p><ul><li><p>提升性能：函数科里化</p></li><li><p>函数拦截：处理数组的 push、pop、shift、unshift、revers、sort、splice 方法</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arrayProto </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arrayMethods </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(arrayProto)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">push</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pop</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">shift</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">unshift</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">splice</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sort</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">reverse</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">method</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arrayMethods</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        configurable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        writable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        value</span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ob</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">__ob__</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// notify change</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">ob</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arrayProto</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">method</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div></li><li><p>事件模型</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const EVENTS = (() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    let events = {</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    return {</span></span>
<span class="line"><span style="color:#A6ACCD;">        /** 注册事件, 可以连续注册, 可以注册多个事件 */</span></span>
<span class="line"><span style="color:#A6ACCD;">        on(eventType, handler) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            (events[eventType] || (events[eventType] = [])).push(handler)</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"><span style="color:#A6ACCD;">        off(eventType, handler) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            // 全部移除</span></span>
<span class="line"><span style="color:#A6ACCD;">            if (arguments.length === 0) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                events = {}</span></span>
<span class="line"><span style="color:#A6ACCD;">                // 清空 eventType 类型注册的事件</span></span>
<span class="line"><span style="color:#A6ACCD;">            } else if (arguments.length === 1) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                events[eventType] = [];</span></span>
<span class="line"><span style="color:#A6ACCD;">                // 移除 eventType 类型下注册的handler事件</span></span>
<span class="line"><span style="color:#A6ACCD;">            } else if (arguments.length === 2) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                for (let i = events[eventType].length; i &gt;= 0; i--) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                    if (events[eventType][i] === handler) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                        events[eventType].splice(i, 1)</span></span>
<span class="line"><span style="color:#A6ACCD;">                    }</span></span>
<span class="line"><span style="color:#A6ACCD;">                }</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        },</span></span>
<span class="line"><span style="color:#A6ACCD;">        /* 执行已经注册的事件， 并且可以传入参数 */</span></span>
<span class="line"><span style="color:#A6ACCD;">        emit(eventType) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            events[eventType] &amp;&amp; events[eventType].forEach(handler =&gt; handler &amp;&amp; handler(...Array.from(arguments).slice(1)))</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">})();</span></span>
<span class="line"><span style="color:#A6ACCD;">EVENTS.on(&#39;data&#39;, function (data, asg, asd) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(data, asg, asd)</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">EVENTS.emit(&#39;data&#39;, 123, 65612, 56123)</span></span>
<span class="line"><span style="color:#A6ACCD;">EVENTS.emit(&#39;2&#39;)</span></span></code></pre></div></li></ul></li><li><p>ssr渲染</p><ol><li>当有大量静态内容时，这些内容会被当做纯字符串推进 buffer 里面，即使存在动态绑定属性，则会通过模板插值嵌入进去，这样会比创建 dom 更加效率</li><li>当静态内容达到一定量级的时候，会用 _createStaticVNode 方法在客户端生成 static node， 这些静态 node 会被直接 inenrHtml 进去。不需要创建对象再去渲染了</li></ol></li><li><p>vue3是如何变快的</p></li><li><p>diff方法优化</p><ul><li>Vue2 中的虚拟dom是进行全量对比</li><li>Vue3 中新增静态标记（patch flag），与上次虚拟节点对比时，只对比带有 patch flag 的节点，并且通过 flag 信息得知当前节点要对比的集体内容</li></ul></li><li><p>hoistStatic 静态提升</p><ul><li>Vue2 中无论元素是否参与更新，每次都会重新创建</li><li>Vue3 中对于不参与更新的元素，只会被创建一次，之后每次渲染时重复使用</li></ul></li><li><p>cacheHandlers 时间侦听器缓存</p><ul><li>onClick 等事件默认为动态绑定，每次都会追踪它的变化，如果是同一个函数，则不去追踪变化，直接缓存复用</li></ul></li></ol><h1 id="vue-router" tabindex="-1">Vue-Router <a class="header-anchor" href="#vue-router" aria-label="Permalink to &quot;Vue-Router&quot;">​</a></h1><ol><li><p>hash 和 history 实现以及区别</p><ul><li>hash： 使用 location.hash 控制路由跳转， 监听 hashchange 事件</li><li>history：使用 H5 中的 history 的 pushState（）和replaceState（）方法。</li></ul></li><li><p>$route和 $router的区别是什么？</p><ul><li>router 为 VueRouter 的实例，是一个全局路由对象，包含了路由跳转的方法、钩子函数等。</li><li>route 是路由信息对象||跳转的路由对象，每一个路由都会有一个route对象，是一个局部对象，包含path,params,hash,query,fullPath,matched,name等路由信息参数。</li></ul></li></ol><h1 id="vuex" tabindex="-1">VueX <a class="header-anchor" href="#vuex" aria-label="Permalink to &quot;VueX&quot;">​</a></h1><ol><li><p>vuex 工作机制 vuex 分为 state、getters、mutations、actions state 存储基本数据 getters 相当于 state 的计算属性 mutations 创建同步的方法，用于同步修改状态 actions 创建异步的方法。用于执行异步方法，然后调用 mutation 的方法修改 state 状态</p></li><li><p>vuex 的应用场景</p><p>多组件复杂的场景使用 vuex，多组件共享一个数据时，对当前数据进行修改，更新到多个组件时 简单组件的场景使用$on、$emit的方式</p></li><li><p>监听 router 的变化</p><ul><li>使用路由钩子</li><li>在组件内使用 watch 监听 $router</li></ul></li></ol><h2 id="代码风格指南" tabindex="-1">代码风格指南 <a class="header-anchor" href="#代码风格指南" aria-label="Permalink to &quot;代码风格指南&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s/UDXrBiEfm8igKZlSyoNJIA" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/UDXrBiEfm8igKZlSyoNJIA</a><a href="https://mp.weixin.qq.com/s/n9-_utYWhczL4ulB3rIRRA" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/n9-_utYWhczL4ulB3rIRRA</a></p><p>vue 为什么使用hooks，hooks如何诞生的（原理）</p><p>hooks代替了mixin， mixin的不足：不可知，不易维护，在mixin中加入 props、data、methods 不向外抛出，属性同名则会导致命名冲突，则会导致不可知。 没有抛出接收则不利于mixin维护。</p><p>组件、路由、异步组件有什么区别</p>`,15),o=[e];function t(r,c,i,y,D,F){return a(),l("div",null,o)}const u=s(p,[["render",t]]);export{C as __pageData,u as default};
