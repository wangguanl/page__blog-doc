import{_ as s,v as l,b as a,R as n}from"./chunks/framework.4f207390.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/基础/模块化.md","filePath":"js/基础/模块化.md","lastUpdated":1664359331000}'),o={name:"js/基础/模块化.md"},p=n(`<ol><li><p>模块化解决了什么问题</p><ul><li>全局变量污染，可通过命名解决，可行但不擅长</li><li>引用顺序，变量提升</li><li>命名空间冲突，两个库可能会使用同一个名称</li><li>无法合理地管理项目的依赖和版本</li><li>无法方便地控制依赖的加载顺序</li></ul></li><li><p>模块化的好处</p><ul><li>使用私有化</li><li>拓展性</li></ul></li><li><p><img src="https://img-blog.csdnimg.cn/20210720141939623.png" alt=""></p></li><li><p>写一个简单的模块化</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// a.js</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> moduleA </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">mod</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">a2</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a2</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">mod</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)(moduleA </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// b.js</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> moduleA </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">mod</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sumCount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">a2</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">mod</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sumCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sumCount</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)(moduleA </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p>AMD、CMD、CommonJS、ESModule 区别</p><ul><li>AMD（Asynchronous Module Definition）意思就是&quot;异步模块定义&quot;。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。AMD 与 CommonJS 最大的不同在于它采用异步的方式去加载依赖的模块。 它解决了 CommonJS 规范不能用于浏览器端的问题</li><li>CMD（Common Module Definition）</li><li>CommonJS 通过 require 引入 module.exports（exports = module.exports = {}） 暴露的模块， 服务器端同步加载，核心思想是通过 require 方法来同步地加载依赖的其他模块。这种规范天生就不适用于浏览器，因为它是同步的。浏览器端每加载一个文件，要发网络请求去取，如果网速慢，就非常耗时，浏览器就要一直等 require 返回，就会一直卡在那里，阻塞后面代码的执行，从而阻塞页面渲染，使得页面出现假死状态。 <ul><li>优点 <ul><li>代码可复用于 Node.js 环境下并运行，例如做同构应用；</li><li>通过 NPM 发布的很多第三方模块都采用了 CommonJS 规范。</li></ul></li><li>缺点 <ul><li>代码无法直接运行在浏览器环境下，必须通过工具转换成标准的 ES5。</li></ul></li></ul></li></ul></li><li><p>同步与异步加载的区别</p><ul><li>同步加载对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。</li><li>但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于&quot;假死&quot;状态（网页失去响应）</li><li>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible。CMD 推崇依赖就近，AMD 推崇依赖前置</li></ul></li><li><p>RequireJS 和 SeaJs</p><ul><li><p>RequireJS 是 AMD 规范</p></li><li><p>SeaJs 是 CMD 规范 Sea.js 实现了对 JS 代码的模块化组织，大大提高了前端开发效率。然而在实际项目中，大量的细分模块却导致大量的脚本请求，拖慢了页面加载速度，也给服务器造成不小的压力。针对这一情况，spm（static package manager）因运而生，专门用于打包、压缩 Sea.js 模块以及 CSS 文件。</p><ul><li>优点 同样实现了浏览器端的模块化加载。 可以按需加载，依赖就近。</li><li>缺点 依赖 SPM 打包，模块的加载逻辑偏重。</li></ul></li><li><p>举例：<a href="https://www.douban.com/note/283566440/" target="_blank" rel="noreferrer">https://www.douban.com/note/283566440/</a></p></li><li><p>模块的加载都是并行。 SeaJs 只会在真正需要使用(依赖)模块时才执行该模块，SeaJS是异步加载模块的没错, 但执行模块的顺序也是严格按照模块在代码中出现(require)的顺序;</p><p>而RequireJS会先尽早地执行(依赖)模块, 相当于所有的require都被提前了, 而且模块执行的顺序也不一定100%就是先mod1再mod2</p><p>可以很明显的看出RequireJS的做法是并行加载所有依赖的模块, 并完成解析后, 再开始执行其他代码, 因此执行结果只会&quot;停顿&quot;1次, 完成整个过程是会比SeaJS要快</p><p>而SeaJS一样是并行加载所有依赖的模块, 但不会立即执行模块, 等到真正需要(require)的时候才开始解析, 这里耗费了时间, 因为这个特例中的模块巨大, 因此造成&quot;停顿&quot;2次的现象, 这就是我所说的SeaJS中的&quot;懒执行&quot;.</p><p>Sea.js 可以像 CommonsJS 那样同步的形式书写模块代码的秘诀在于：当 b.js 模块被 require 时，b.js 加载后，Sea.js 会扫描 b.js 的代码，找到 require 这个关键字，提取所有的依赖项，然后加载，等到依赖的所有模块加载完成后，执行回调函数，此时再执行到 require(‘a.js’) 这行代码时，a.js 已经加载好在内存中了。</p><p>RequireJS 会等待当前 require 依赖加载完成后执行回调，如果 require 的依赖中嵌套依赖，则会先加载嵌套依赖，完成后再执行首层回调</p></li><li><p><strong>Sea.js 与 RequireJS 的异同?</strong> RequireJS 和 Sea.js 都是模块加载器，倡导模块化开发理念，核心价值是让 JavaScript 的模块化开发变得简单自然。</p><p>两者的主要区别如下：</p><p>定位有差异。RequireJS 想成为浏览器端的模块加载器，同时也想成为 Rhino / Node 等环境的模块加载器。Sea.js 则专注于 Web 浏览器端，同时通过 Node 扩展的方式可以很方便跑在 Node 环境中。 遵循的规范不同。RequireJS 遵循 AMD（异步模块定义）规范，Sea.js 遵循 CMD （通用模块定义）规范。规范的不同，导致了两者 API 不同。Sea.js 更贴近 CommonJS Modules/1.1 和 Node Modules 规范。 推广理念有差异。RequireJS 在尝试让第三方类库修改自身来支持 RequireJS，目前只有少数社区采纳。Sea.js 不强推，采用自主封装的方式来“海纳百川”，目前已有较成熟的封装策略。 对开发调试的支持有差异。Sea.js 非常关注代码的开发调试，有 nocache、debug 等用于调试的插件。RequireJS 无这方面的明显支持。 插件机制不同。RequireJS 采取的是在源码中预留接口的形式，插件类型比较单一。Sea.js 采取的是通用事件机制，插件类型更丰富。</p></li></ul></li></ol><h2 id="第三方" tabindex="-1">第三方 <a class="header-anchor" href="#第三方" aria-label="Permalink to &quot;第三方&quot;">​</a></h2><ul><li><a href="https://github.com/requirejs/requirejs" target="_blank" rel="noreferrer">AMD - requireJs</a></li><li><a href="https://seajs.github.io/seajs/docs/" target="_blank" rel="noreferrer">CMD - seaJs</a></li><li>CommonJS</li><li>UMD</li></ul><h2 id="文章" tabindex="-1">文章 <a class="header-anchor" href="#文章" aria-label="Permalink to &quot;文章&quot;">​</a></h2><ul><li><a href="https://www.cnblogs.com/moxiaowohuwei/p/8692359.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/moxiaowohuwei/p/8692359.html</a></li><li><a href="https://www.jb51.net/article/118063.htm" target="_blank" rel="noreferrer">https://www.jb51.net/article/118063.htm</a></li><li><a href="https://github.com/seajs/seajs/issues/277" target="_blank" rel="noreferrer">https://github.com/seajs/seajs/issues/277</a></li><li><a href="https://www.douban.com/note/283566440/" target="_blank" rel="noreferrer">https://www.douban.com/note/283566440/</a></li><li><a href="https://www.zhihu.com/question/20342350" target="_blank" rel="noreferrer">https://www.zhihu.com/question/20342350</a></li></ul>`,5),e=[p];function t(r,c,i,y,D,F){return l(),a("div",null,e)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};
