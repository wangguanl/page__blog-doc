import{_ as l,v as i,b as t,R as r}from"./chunks/framework.4f207390.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"其他/工作/其他/敏捷式开发.md","filePath":"其他/工作/其他/敏捷式开发.md","lastUpdated":1661404615000}'),o={name:"其他/工作/其他/敏捷式开发.md"},s=r('<h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><ul><li>更强调<strong>程序员团队</strong>与<strong>业务专家之间</strong>的<strong>紧密协作</strong>、<strong>面对面的沟通</strong>（认为比书面的文档更有效）</li><li><strong>频繁交付新的软件版本</strong></li><li><strong>紧凑而自我组织型的团队</strong></li><li><strong>能够很好地适应需求变化的代码编写和团队组织方法</strong></li></ul><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><ul><li><p><strong>更快交付价值</strong>：敏捷是基于价值驱动交付，项目团队要频繁的且尽快的给客户交付可以使用的产品，并尽早的让让产品投入市场可以尽早的验证其商业模式和商业价值，这是敏捷提倡的核心价值之一。</p></li><li><p><strong>更低的风险</strong>：敏捷提倡优先交付高价值、高风险的需求，然后交付高价值、低风险的需求、再交付低价值、高风险、最后低价值、低风险的需求。这样的好处是把最高风险的需求在项目的初期就开始做，可以最早发现该产品是否可行（通常只要1~4周）。如果因为市场、技术或者其它原因失败了，可以及时停止该项目，降低项目风险。即使这个项目失败了，这个失败的代价相对来说小一些。</p></li><li><p><strong>拥抱变化：</strong> 因为市场在变化，用户的期望和要求在变化，客户的需求也会随着这些因素的变化而变化，只有及时响应这些变化，并尽快予以实施，才能帮助客户在瞬息万变的市场中保证竞争力和吸引力。而敏捷能够帮助团队在小步快跑的过程中能够快速的响应变化。</p></li><li><p><strong>更好的质量：</strong> 敏捷提倡高频率的交付有价值的产品。每天的例会、迭代计划会议、迭代评审会、迭代回顾会议都在对可交付成果质量上进行层层把关，因为在这几个会议中会频繁讨论遇到的问题/解决方案，验收标准等等。同时，也会邀请项目干系人参加迭代评审会并对可交付成果验收和反馈，这样团队可以及时予以调整，以确保质量。</p></li><li><p><strong>复盘会，持续改进：</strong> 敏捷提倡不断调整和优化，并在每个迭代的迭代回顾会议进行分析、讨论、总结敏捷当前迭代开发过程中需要改进或者要提升的地方，进而在下个迭代中改进、调整和优化。这是整个团队成员不断学习，不断提升自己经验、技能的一个很好的机会。另外，因为敏捷强调客户参与的重要性，对于客户的反馈意见和建议，开发团队也会及时给与相应以及反馈，让双方可以更好的合作，建立更加信任的合作关系。</p></li><li><p><strong>更高的团队满意度：</strong></p><ul><li><p>重视并尊重团队成员的想法和意见，授权团队并引导团队成员自组织和自管理。</p></li><li><p>更重要的是，团队成员可以决定要做什么、怎么做、什么时候做，并自己监控和管理工作进展，对结果负责；</p></li><li><p>团队成员可以一起讨论并确认工作协议，确保考虑并接纳每个人的意见；团队成员可以一起评估故事点；通过这些，团队成员可以更高效的工作，交付的质量也会提高，团队成员的满意度也会大大提高。</p></li></ul></li><li><p><strong>更大的灵活性：</strong> 敏捷基于价值驱动，它的项目范围是可以灵活调整的，这就给项目干系人很多的灵活性来根据市场不断调整需求范围、变更以及优先级等等。另外，敏捷提倡频率与团队和客户沟通交流，并不断根据反馈和意见调整管理方法、需求流程、开发流程以及运维流程等等。</p></li><li><p><strong>更高的客户满意度：</strong> 敏捷提倡尽早和频繁的为客户交付有价值的产品，以确保更高的质量，更高的成功率，为客户尽早带来商业投资回报率的机会。</p></li></ul><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><ul><li><strong>很难进行准确的资源规划：</strong> 由于敏捷团队不是一开始就知道产品“最终的样子”，而是在过程中探索用户的需求逐渐知道产品真正的终局状态，这样一来就给前期的规划（成本，时间，资源）带来了很大的挑战（项目越大越复杂这一点变动更加明细）。</li><li><strong>很难准确的定义“轻量的“或必要的文档：</strong> 敏捷倡导的是用工作的软件即文档**（核心是代码即文档）** 。整个项目用于产品开发的文档不是一开始准备好的（甚至都没有RP原型设计），而是在过程中”及时的“ just-in-time准备出来的。因此，我们看到的是非常简单的且常常被放在最后处理的文档（在项目中涉及到移交或问题分析时这一点显得尤其突出）</li><li><strong>很难把握整体产品的一致性：</strong> 增量交付可能有助于更快地将产品推向市场，但这也是敏捷方法的一大缺点。因为当团队在不同的周期内对各个组件进行开发时，整体的输出往往会变得非常零散，而不是一个内部紧密集合的整体。（当项目对UI和UX有更高的要求时，这个挑战就变得更加明显）。</li><li><strong>很难预测有限的终点：</strong> 敏捷在一开始要求最低限度的规划，这使得交付新的、意想不到的功能时很容易偏离方向。此外，这意味着项目没有限定的终点，因为从来没有一个明确的 &quot;最终的产品&quot;样子。</li></ul><p><strong>团队要素：</strong></p><ol><li>团队有三名或以上的研发工程师。如果你的团队是由新人组成，那么你需要等待合适的核心出现。</li><li>团队内有一名合适的核心（产品核心、技术核心）。当团队内无法找到合适的核心时，不要轻易推行敏捷。</li></ol><h2 id="个人要素" tabindex="-1">个人要素 <a class="header-anchor" href="#个人要素" aria-label="Permalink to &quot;个人要素&quot;">​</a></h2><ul><li>人员彼此信任，所作决定得到认可</li><li>人少但是精干，能独挡一面</li><li>应对快速变化的需求</li></ul><h2 id="错误的做法" tabindex="-1">错误的做法 <a class="header-anchor" href="#错误的做法" aria-label="Permalink to &quot;错误的做法&quot;">​</a></h2><ul><li><p>不复盘</p></li><li><p>不重视需求分析</p></li><li><p>不重视文档</p></li><li><p>不重视测试</p><p>导致结果：</p><ul><li>需求混乱</li><li>产品缺陷</li><li>bug多</li><li>维护困难</li><li>在开发阶段反复返工，与产品、测试扯皮。不但敏捷的目标没有实现、反而花了更多的时间来做开发，甚至做出的产品无法使用。</li></ul></li></ul>',12),a=[s];function n(e,p,g,u,h,d){return i(),t("div",null,a)}const m=l(o,[["render",n]]);export{_ as __pageData,m as default};
