import{_ as r,v as e,b as t,R as a}from"./chunks/framework.4f207390.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"其他/工作/技术文档/乐高/引入新技术.md","filePath":"其他/工作/技术文档/乐高/引入新技术.md","lastUpdated":1661404615000}'),s={name:"其他/工作/技术文档/乐高/引入新技术.md"},o=a('<p><strong>vite</strong> 在浏览器支持 ES 模块之前，JavaScript 并没有提供原生机制让开发者以模块化的方式进行开发。这也正是我们对 “打包” 这个概念熟悉的原因。<a href="https://webpack.js.org/" target="_blank" rel="noreferrer">webpack</a>、<a href="https://rollupjs.org/" target="_blank" rel="noreferrer">Rollup</a> 和 <a href="https://parceljs.org/" target="_blank" rel="noreferrer">Parcel</a> 等工具极大地改善了前端开发者的开发体验，然而，当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长，我们开始遇到性能瓶颈 —— 使用 JavaScript 开发的工具通常需要很长时间（甚至是几分钟！）才能启动开发服务器，如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。Vite 使用 <a href="https://esbuild.github.io/" target="_blank" rel="noreferrer">esbuild</a> 来进行依赖预构建。这为开发服务器冷启动和依赖项失活的重新构建方面带来了显著的性能改进。</p><p><strong>vue3</strong>性能比vue2更快，内存使用降低一半，支持按需编译体积更小。<strong>vue3</strong>的技术生态体系也全面更新，性能优化效果明显提升。</p>',2),n=[o];function p(_,l,i,c,d,f){return e(),t("div",null,n)}const u=r(s,[["render",p]]);export{h as __pageData,u as default};
